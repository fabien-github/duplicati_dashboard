---
apiVersion: 1

groups:
  - orgId: 1
    folder: 'Duplicati'
    name: 'Duplicati Dashboard Alert Group'
    interval: 60s
    rules:
      - uid: duplicati_alert_XDE2BPD82
        dashboardUid: 'ltaGTeQDz672'
        panelId: 169
        annotations:
          __dashboardUid__: ltaGTeQDz672
          __panelId__: 169
        noDataState: NoData
        title: 'Duplicati Dashboard Alert'
        condition: C
        for: 1m
        data:
          - refId: A
            datasourceUid: z8qxnDuGz
            queryType: ''
            relativeTimeRange:
              from: 600
              to: 0
            model:
              refId: A
              hide: false
              query: "import \"influxdata/influxdb/schema\"\r\n\r\ndata = from(bucket: v.defaultBucket)\r\n  |> range(start: -30d)\r\n\t|> filter(fn: (r) => (r[\"_measurement\"] == \"duplicati\"))\r\n  |> map(fn: (r) => ({r with \"backup-name\": r[\"backup-name\"], \"BackupName\": string(v: r[\"backup-name\"])}))\r\n  |> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\r\n\t|> map(fn: (r) => ({r with ParsedResult: if exists r.ParsedResult and r.ParsedResult == \"Success\" then float(v: 1) else if r.ParsedResult == \"Warning\" then float(v: 0.5) else float(v: 0)}))\r\n  |> keep(fn: (column) => (column == \"_time\" or column == \"ParsedResult\" or column == \"backup-name\"))\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> yield()"
          - refId: B
            datasourceUid: '-100'
            queryType: ''
            model:
              refId: B
              hide: false
              type: reduce
              datasource:
                uid: '-100'
                type: __expr__
              conditions:
                - type: query
                  evaluator:
                    params:
                      - 3
                    type: gt
                  operator:
                    type: and
                  query:
                    params:
                      - A
                  reducer:
                    params: []
                    type: last
              expression: A
              reducer: last
              settings:
                mode: dropNN
            relativeTimeRange:
              from: 600
              to: 0
          - datasourceUid: '-100'
            model:
              refId: C
              datasource:
                type: __expr__
                uid: __expr__
                name: Expression
              type: math
              conditions:
                - type: query
                  reducer:
                    type: max
                    params: []
                  operator:
                    type: and
                  query:
                    params:
                      - B
                  evaluator:
                    params:
                      - 0.4
                      - 0
                    type: lt
              expression: $B < 0.4
              hide: false
            refId: C
            queryType: ''
            relativeTimeRange:
              from: 600
              to: 0
